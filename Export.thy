theory Export
imports Rustabelle
begin

function fac_16 where "fac_16 cont s = (λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, Some core_iter_Iterator_next, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, Some (let (_, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, Some (let (_, _, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _) = s in the x), s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, Some ((let (_, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _) = s in the x) (let (_, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _) = s in the x)), s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (case (let (_, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _) = s in the x) of core_option_Option_None _ => (cont s) | core_option_Option_Some _ => (λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, Some (case (let (_, _, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _) = s in the x) of core_option_Option_Some x => x), s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, Some (let (_, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, Some ((let (_, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x) * (let (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _, _) = s in the x)), s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, None, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, None, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, None, s15, s16, s17, s18, s19)));
(fac_16 cont s)))"

definition fac :: "u32 => u32" where
"fac n = ((λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (Some n, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, Some 1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, Some core_iter_IntoIterator_into_iter, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, Some (let (x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, Some (core_ops_Range 2 (let (_, _, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _) = s in the x)), s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, Some ((let (_, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _) = s in the x) (let (_, _, _, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _) = s in the x)), s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, Some (let (_, _, _, _, _, _, _, x, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont. fac_16 ((λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, None, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, None, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, None, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, None, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, None, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, Some (let (_, _, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, Some (let (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x, _, _) = s in the x), s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, None, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, Some (let (_, x, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = s in the x), s19)));
(λcont s. cont (let (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19) = s in (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, Some (let (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x, _) = s in the x))));
id cont))) (λs. (let (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x) = s in the x)) (None::u32 option, None::u32 option, None::unit option, None::core_ops_Range option, None::u32 option, None::unit option, None::unit option, None::core_ops_Range option, None::core_ops_Range => (core_ops_Range) option, None::core_ops_Range option, None::u32 option, None::core_option_Option option, None::core_ops_Range => (core_option_Option, core_ops_Range) option, None::core_ops_Range option, None::core_ops_Range option, None::unit option, None::u32 option, None::unit option, None::u32 option, None::u32 option)"

end
