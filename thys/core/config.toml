rustc_args = "rust/src/libcore/lib.rs"

targets = [
  '«\[T\] as core.slice.SliceExt».binary_search',
  #ref
  "«i32 as core.default.Default»"
]

# items axiomatized in pre.lean
ignore = [
  # intrinsics
  "ops.FnOnce", "ops.FnMut", "ops.Fn",
  # unsafe
  "mem.swap",
  "«[T] as core.slice.SliceExt».len"
]

# unsafe functions that rely on other definitions and thus have to be replaced inline
[replace]
"«[T] as core.ops.Index<core.ops.Range<usize>>».index" = """
/-
/// Implements slicing with syntax `&self[begin .. end]`.
///
/// Returns a slice of self for the index range [`begin`..`end`).
///
/// This operation is `O(1)`.
///
/// # Panics
///
/// Requires that `begin <= end` and `end <= self.len()`,
/// otherwise slicing will panic.
-/
definition «[T] as core.ops.Index<core.ops.Range<usize>>».index {T : Type₁} (self : slice T) (index : ops.Range usize) : sem (slice T) :=
if ops.Range.start index ≤ ops.Range.«end» index ∧ ops.Range.«end» index ≤ list.length self
then return (list.firstn (ops.Range.«end» index - ops.Range.start index) (list.dropn (ops.Range.start index) self))
else mzero"""

[traits."slice.SliceExt"]
# only method called from default methods, everything else should be static calls
only = ["len"]
